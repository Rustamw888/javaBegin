package ru.qamilord.oopShop;

/*

Задача Магазин

1) очертить функционал
  - пришел клиент и купил товар
  - товар хранится в отделе
  - товар имеет свойства
  - в магазине есть продавец
  - кассир - принимает деньги
2) нет UI - только вывод в консоль
3) разделить на сущности - логические
 - магазин (включает продавца, кассира, товар имеет рабочие часы)
 - продавец (выполняет функцию продажи, уменьшает количество товаров, либо увеличивает при возврате)
 - кассир (выполняет функцию учета денежных средств, действие влияет на убыль, прибыль и связано с
 методом продавца по учету количества товаров, выдает чек клиенту)
 - товар (имеет количество, цену, гарантийный срок, все связано с методами кассиров и продавцов)
 - клиент (может выбрать товар и купить, а может вернуть товар, если гарантийный срок не вышел с
 момента покупки и если часы рабочие, имеет количество денег в кошельке)
4) создавать абстр (должны видеть весь функционал из п 1) и реал
 - магазин (has продавец, has кассир, has товар) интерфейс имеющий геттеры интерфейса продавца,
 кассира, товара, имеет рабочие часы (если рабочие часы вне рамок, то метод продавца не рабочий,
 продавец не доступен)
 - продавец (композит магазина) интерфейс с методом проверяющего гарантию, чек, наличие товара и
 если все хорошо, то отправляет к кассиру (доступен только если магазин открыт)
 - кассир (композит магазина) интерфейс минусует/прибавляет количество денег у магазина,
 минусует/прибавляет количество денег у клиента (доступен только после метода продавца)
 - товар (композит магазина) класс без интерфейса, потому что только свойства без методов
 / количество, цена, гарантийный срок, наименование
 - клиент (ассоциация магазина) класс без интерфейса, потому что только свойства без методов
 / поле общее количество денег, поле количество имеющегося товара



абстаркция реал
полим
инкапс

неизбыточность кода


 **/


import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import ru.qamilord.oopShop.interfaces.ISeller;

public class ShopMain {

  public static void main(String[] args) {

    Shop shop = new Shop();
    ISeller seller = new Seller("Ерла");
    Customer customer1 = new Customer("Сакен", 100, null);

    Scanner scanner = new Scanner(System.in);
    int index = scanner.nextInt();

    List<Product> productList = new ArrayList<>(List.of(
        new Product("Кумыс", 120),
        new Product("Казы", 50),
        new Product("Яйца", 80),
        new Product("Хлеб", 50),
        new Product("Чай", 350),
        new Product("Молоко", 60)));

    shop.setProductList(productList);

    shop.setSeller(seller);

    seller.sale(shop, shop.getProductList().get(index), customer1, index);
  }

}
